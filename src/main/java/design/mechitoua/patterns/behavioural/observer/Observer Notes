# Observer Design Pattern:

This pattern is useful when we are interested in the state of an object
and we want to be notified of any changes in that state.

In Observer pattern, the object that watch the state of another object
is called Observer and the object that is being watched is called Subject.

In this pattern, we define a one-to-many dependency between objects so
that when one object changes state, all its dependents are notified and
updated automatically.

Subject contains a list of observers to notify of any change in it's state
, so it should provide methods using which observers an register and
unregister themselves. Subject also contain a method to notify all the
observers of any change and either it can send the update while notifying
the observer or it can provide another method to get the update.

Observer should have a method to set the object to watch and another method
that will be used by Subject to notify them of any updates.

# Examples of Observer Design Pattern in JDK:

-   java.util.Observer & java.util.Observable
-   javax.servlet.http.HttpSessionBindingListener
-   javax.servlet.http.HttpSessionAttributeListener
