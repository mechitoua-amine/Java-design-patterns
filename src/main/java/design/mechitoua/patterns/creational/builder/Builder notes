Builder Design Pattern:

* Solve problems in the factory and abstract factory patterns when the object contains alot of attributes.

There are three major issues with factory and abstract factory design patterns
when the object contains alot of attributes:
    1- We have to pass many arguments fro client program to the factory class
        that can be error prone because most of the time, the type of arguments
        are the same and from client side its hard to maintain the order of the
        arguments.
    2- Few of the parameters might be optional but in factory pattern, we are
        forced to send all the parameters and optional parameters need to be
        sent as Null or default value.
    3- If the object is very heavy and object creation is complex, then all
        that complexity will be part of factory classes that is confusing.

Builder Design Pattern examples in JDK:
    * java.lang.StringBuilder append() method
    * java.lang.StringBuffer append() method (thread-safe)
    * All implementaions of java.lang.Appendable(BufferedWriter, CharArrayWriter, FileWriter,
      OutputStreamWriter, PipedWriter, PrintStream, PrintWriter, StringWriter, Writer) are
      infact good examples of Builder Pattern in java.
    * java.nio.ByteBuffer put() method (also on CharBuffer, ShorBuffer, IntBuffer, LongBuffer,
      FloatBuffer, DoubleBuffer)
    * java.uril.stream.Stream.Builder