# Proxy Design Pattern

The Proxy pattern is used to provide a surrogate or placeholder object,
which references a real object. The pattern allows to defer instantiation
of an object until it is needed. This is useful when the lifetime of an
object isn't predictable or can't be managed.

the proxy pattern allows us to create an intermediary that acts as an
interface to another resource and also hiding the underlying complexity
of the componenet.

Proxy means "in place of", 'representing' or 'on behalf of' are literal
meanings of proxy and that directly explains the name of the pattern.

Consider a heavy java Object (like a JDBC connection or a SessionFactory)
that requires some initial configuration

We only want such objects to be created when they are needed, and once
thay are we'd want to reuse them for all calls.

## When to use the Proxy pattern:

1. When we want a simplified version of a complex or heavy object:
   in this case, we may represent it with a skeleton object which loadds the
   original object on demand, also called as lazy initalization. This is
   known as the Virtual Proxy

2. When the original object is present in diferrent adress space, and we
   want to represent it locally:
   We can create a proxy which does all the necessary boilerplate stuff like
   creating and maintaining the connection, encoding , decoding, etc..., while
   the client accesses it as it was present in their local adress space. This
   is called Remote Proxy.

3. When we want to add a layer of security to the original underlying object
   to provide controlled access based on access rights of the client: this is
   called Protection Proxy.

## Proxy Design Pattern Examples in JDK:

-   java.lang.reflect.Proxy
-   java.rmi.\*
-   javax.ejb.EJB
-   javax.persistence.PersistenceContext
